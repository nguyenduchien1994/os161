syscalls ratings:
open: 4 (Julia)
read: 4 (Tristan, Hien)
write: 4 (Tristan)
lseek: 4 (Tristan)
close: 4 (Hien, Tristan)
dup2: 4 (Hien, Tristan)
chdir: 5 (Julia, Tristan)
__getcwd: 5 (Tristan)
getpid: 5 (Julia)
fork: 4 (Tristan)
   It works expect for some minor errors with the background managers. 
execv: 3 (Julia)
  Questions: What are good tests for execv? What are the boarder line cases for execv? 
  We are just debugging, right now it is hard to debug because other syscalls fall. To approach completing the implemenation is to fix the other syscalls and then running tests and debugging the syscall.   
waitpid: 4 (Tristan, Julia, Hien)
  It panics when runs, it is a minor error with the background managers. 
_exit: 4 (Tristan, Julia, Hien)
  It panics when runs, it is a minor error with the background managers.

Team Member Questions
Tristan:
1. I learned a great deal about the file system interface and where it is implemented, the threading system, and the interaction with userspace.
2. I would like to learn more about the direct implementation of the scheduling system and how it integrates with the rest of the structures. I will need this to implement scheduling.
3. First, we did not know where to start, and had trouble trawling through thousands of lines of essentially undocumented code to figure out where even to begin. Once we had read enough to start, it was difficult to do as a group since there were so many interlocking components, everyone needed to fully understand every implementation. Finally, we had trouble with debugging for the same reason.

Hien:
1. While working on this project, I learned a lot more about OS161 user/kernel space and process subsystems. I also learn how to use the debugger gdb system more efficiently and it really helps in term of understanding out implementation and figuring out what goes right and wrong. 
2. I wish I could know more about the file system, virtual file system and virtual memory to understand how they are implemented and behaved in OS161.
3. The biggest difficulty that I encountered working in this project is being able to understand the already implemented features of OS161. In order to work on the syscalls implementation, I had to read through many different files, tried to figure out what features are relevant and what are not, and decided on which functions to be used. Another difficulty is the design of the global process manager which function is to keep track and manage the processes. It is also chanllenging to understand the communication between the processes and the file system as we didn't really do any work on the file system itself.           


Julia:
1. The subsystems of OS/161 I learned more about while working on the project are the file system, as well as the  global management. I also got a complete understanding of everything that the PCB takes care of. 
2. One thing I wish I knew about os/161 that I haven't figured out is how the user space and virtual memory really work and fully understanding them. 
3. The difficulties I encountered while implementing the project was understanding how all the parts of the operating system work together and function. Another difficulty was figuring out what was already implemented within OS/161 and understanding what each of those parts did and how they worked. I also found that understanding how the virual memory and global manager to be very difficult.  

Teamwork:
Our teamwork was good, we worked well together as a group. Although we worked well together, it would have been nice if we worked more independently.  We collaborated effectively using git.

Design Document Reflection:
Interacting with the file system was harder than we thought it was going to be.Creating data structures, interacting with user space (using copyin/out)  was easier than we thought it was going to be.

Our design changed with fork and the interface with the interaction with kern space and user space. Fork changed because we thought there was going to have to manually change the fork thread instead of using built in functions. The interface changed due to how syscall.c worked.

Differences in Completion
Desgin:
Look at scheduling more indepth and really hash out what is happening. This way we can have better design implementation. We are also edit our waitpid and exit to use semaphores instead of the counter. 

Group Dynamic:
For finishing us syscall funcations, we will debug independently, but have a lot of communication when a shared file it changed. 
 
Workflow:
We will try to spread the work out more evenly through out the remaining time left on the work. This is  in order to not have a lot of implementation to complete in the rest of the project, as well as have more time to fix any road blocks we have. 

Timeline:
By Wednesday we want to have all of our syscalls done. This way we will have a full week and a half to implement scheduling. 
